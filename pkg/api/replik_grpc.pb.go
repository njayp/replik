// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: replik.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReplikClient is the client API for Replik service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplikClient interface {
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	File(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Replik_FileClient, error)
}

type replikClient struct {
	cc grpc.ClientConnInterface
}

func NewReplikClient(cc grpc.ClientConnInterface) ReplikClient {
	return &replikClient{cc}
}

func (c *replikClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/api.Replik/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replikClient) File(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Replik_FileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Replik_ServiceDesc.Streams[0], "/api.Replik/File", opts...)
	if err != nil {
		return nil, err
	}
	x := &replikFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Replik_FileClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type replikFileClient struct {
	grpc.ClientStream
}

func (x *replikFileClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReplikServer is the server API for Replik service.
// All implementations must embed UnimplementedReplikServer
// for forward compatibility
type ReplikServer interface {
	Status(context.Context, *Empty) (*StatusResponse, error)
	File(*FileRequest, Replik_FileServer) error
	mustEmbedUnimplementedReplikServer()
}

// UnimplementedReplikServer must be embedded to have forward compatible implementations.
type UnimplementedReplikServer struct {
}

func (UnimplementedReplikServer) Status(context.Context, *Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedReplikServer) File(*FileRequest, Replik_FileServer) error {
	return status.Errorf(codes.Unimplemented, "method File not implemented")
}
func (UnimplementedReplikServer) mustEmbedUnimplementedReplikServer() {}

// UnsafeReplikServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplikServer will
// result in compilation errors.
type UnsafeReplikServer interface {
	mustEmbedUnimplementedReplikServer()
}

func RegisterReplikServer(s grpc.ServiceRegistrar, srv ReplikServer) {
	s.RegisterService(&Replik_ServiceDesc, srv)
}

func _Replik_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplikServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Replik/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplikServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Replik_File_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplikServer).File(m, &replikFileServer{stream})
}

type Replik_FileServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type replikFileServer struct {
	grpc.ServerStream
}

func (x *replikFileServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

// Replik_ServiceDesc is the grpc.ServiceDesc for Replik service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Replik_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Replik",
	HandlerType: (*ReplikServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Replik_Status_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "File",
			Handler:       _Replik_File_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "replik.proto",
}
