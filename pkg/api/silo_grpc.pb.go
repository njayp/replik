// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: silo.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SiloClient is the client API for Silo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SiloClient interface {
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Manifest, error)
	File(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Silo_FileClient, error)
}

type siloClient struct {
	cc grpc.ClientConnInterface
}

func NewSiloClient(cc grpc.ClientConnInterface) SiloClient {
	return &siloClient{cc}
}

func (c *siloClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Manifest, error) {
	out := new(Manifest)
	err := c.cc.Invoke(ctx, "/api.Silo/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siloClient) File(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Silo_FileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Silo_ServiceDesc.Streams[0], "/api.Silo/File", opts...)
	if err != nil {
		return nil, err
	}
	x := &siloFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Silo_FileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type siloFileClient struct {
	grpc.ClientStream
}

func (x *siloFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SiloServer is the server API for Silo service.
// All implementations must embed UnimplementedSiloServer
// for forward compatibility
type SiloServer interface {
	List(context.Context, *Empty) (*Manifest, error)
	File(*FileRequest, Silo_FileServer) error
	mustEmbedUnimplementedSiloServer()
}

// UnimplementedSiloServer must be embedded to have forward compatible implementations.
type UnimplementedSiloServer struct {
}

func (UnimplementedSiloServer) List(context.Context, *Empty) (*Manifest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSiloServer) File(*FileRequest, Silo_FileServer) error {
	return status.Errorf(codes.Unimplemented, "method File not implemented")
}
func (UnimplementedSiloServer) mustEmbedUnimplementedSiloServer() {}

// UnsafeSiloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiloServer will
// result in compilation errors.
type UnsafeSiloServer interface {
	mustEmbedUnimplementedSiloServer()
}

func RegisterSiloServer(s grpc.ServiceRegistrar, srv SiloServer) {
	s.RegisterService(&Silo_ServiceDesc, srv)
}

func _Silo_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiloServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Silo/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiloServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Silo_File_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SiloServer).File(m, &siloFileServer{stream})
}

type Silo_FileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type siloFileServer struct {
	grpc.ServerStream
}

func (x *siloFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

// Silo_ServiceDesc is the grpc.ServiceDesc for Silo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Silo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Silo",
	HandlerType: (*SiloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Silo_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "File",
			Handler:       _Silo_File_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "silo.proto",
}
